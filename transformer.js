#target illustrator//@include perspective-transform.js// if ( app.documents.length == 0 ) {//// }var transformFunc;function main(){  transformFunc = setupTransform("src","dest");  doTransform(app.selection);  return 0;}main();function doTransform(objCollection, groupAs){  for (var i=0; i<objCollection.length; i++){    switch (objCollection[i].typename){      case "PathItem"          : var aPath = transformedPath(objCollection[i], groupAs); break;      case "GroupItem"         :                var nextGroup = (groupAs)?groupAs.groupItems.add():app.activeDocument.groupItems.add();                doTransform(objCollection[i].pathItems        , nextGroup );                doTransform(objCollection[i].compoundPathItems, nextGroup );                doTransform(objCollection[i].groupItems       , nextGroup );              break;      case "CompoundPathItem"  :                var nextComp = (groupAs)?groupAs.compoundPathItems.add():app.activeDocument.compoundPathItems.add();                doTransform(objCollection[i].pathItems, nextComp );              break;    }  }}function setupTransform(srcName,dstName){  var srcPath = null;  var dstPath = null;  // Find elements named "src", "dest" and the paramater passded  for (var i=0;i<app.activeDocument.pathItems.length;i++){    var obj = app.activeDocument.pathItems[i];    if (obj.name==srcName) srcPath=obj;    if (obj.name==dstName) dstPath=obj;  }  // Find quad points for src and dest. (have to be same order)  if ((srcPath==null) || (dstPath == null)) return -1;  var source = [];  var destin = [];  for (var i=0; i<4; i++){    source.push(srcPath.pathPoints[i].anchor); //point n    destin.push(dstPath.pathPoints[i].anchor); //point n  }  // Flatten array of points to simple array of alternating x,y pairs  var flatSource = [].concat.apply([],source);  var flatdestin = [].concat.apply([],destin);  // Calculate the transformFunc for conversion  var perspectiveTran = PerspT(flatSource, flatdestin);  return perspectiveTran;}function transformedPath(srcObj, optGroup){  var newPath = (optGroup)?optGroup.pathItems.add():app.activeDocument.pathItems.add();  for(var i=0; i<srcObj.pathPoints.length; i++){    var newPoint = newPath.pathPoints.add();    var thisPt   = srcObj.pathPoints[i];    if (thisPt.pointType == PointType.CORNER){      newPoint.anchor         = transformFunc.transform(thisPt.anchor[0],thisPt.anchor[1]);      newPoint.leftDirection  = newPoint.anchor;      newPoint.rightDirection = newPoint.anchor;      newPoint.pointType      = PointType.CORNER;    } else {      newPoint.anchor         = transformFunc.transform(thisPt.anchor[        0],thisPt.anchor[        1]);      newPoint.leftDirection  = transformFunc.transform(thisPt.leftDirection[ 0],thisPt.leftDirection[ 1]);      newPoint.rightDirection = transformFunc.transform(thisPt.rightDirection[0],thisPt.rightDirection[1]);      newPoint.pointType      = PointType.SMOOTH;    }  }  newPath.name = srcObj.name+"_tr";  if (srcObj.closed) newPath.closed = true;  return newPath;}